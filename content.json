{"meta":{"title":"Gz's Blog","subtitle":"","description":"Coding for life","author":"Gzone","url":"https://blog.zhanggz.com","root":"/"},"pages":[{"title":"","date":"2025-06-15T01:49:56.329Z","updated":"2025-06-15T01:49:56.329Z","comments":true,"path":"404.html","permalink":"https://blog.zhanggz.com/404.html","excerpt":"","text":""},{"title":"","date":"2023-07-25T09:36:06.000Z","updated":"2023-07-25T09:46:56.105Z","comments":false,"path":"about/index.html","permalink":"https://blog.zhanggz.com/about/index.html","excerpt":"","text":"this is about page."},{"title":"categories","date":"2023-07-25T08:18:16.000Z","updated":"2023-07-25T09:35:10.879Z","comments":false,"path":"categories/index.html","permalink":"https://blog.zhanggz.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-07-25T08:16:37.000Z","updated":"2023-07-25T08:17:38.273Z","comments":false,"path":"tags/index.html","permalink":"https://blog.zhanggz.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringMVC数据绑定校验","slug":"SpringMVC数据绑定校验","date":"2016-04-07T13:59:38.000Z","updated":"2023-07-25T09:32:40.094Z","comments":true,"path":"2016/04/07/SpringMVC数据绑定校验/","link":"","permalink":"https://blog.zhanggz.com/2016/04/07/SpringMVC%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E6%A0%A1%E9%AA%8C/","excerpt":"在使用springMVC与前端小伙伴对接开发时，最日常的工作莫过于收参、数据绑定、校验等繁琐的工作。springMVC自身提供了较好的支持，这里简单记录，查漏补缺。","text":"在使用springMVC与前端小伙伴对接开发时，最日常的工作莫过于收参、数据绑定、校验等繁琐的工作。springMVC自身提供了较好的支持，这里简单记录，查漏补缺。 1.注解数据绑定1.1.RequestParam12345@RequestMapping(&quot;/get1&quot;)public String get1(@RequestParam(value=&quot;p1&quot;, required=true, defaultValue = &quot;test&quot;)String p1,ModelMap map)&#123; map.put(&quot;p1&quot;, p1); return &quot;&quot;;&#125; required: 是否必须，默认为true，表示请求中一定要有相应的参数，否则将报404错误码defaultValue: 默认值，表示如果请求中没有同名参数时的默认值，一般分页参数可以这样设计 如果请求参数类似于url?role&#x3D;admin&amp;role&#x3D;user，则实际roleList参数入参的数据为“admin,user”，即多个数据之间使用“，”分割； 123456789101112@RequestMapping(&quot;/get1&quot;)public String get1(@RequestParam(value=&quot;role&quot;) String[] roleList)&#123; return &quot;&quot;;&#125;@RequestMapping(&quot;/get1&quot;)public String get1(@RequestParam(value=&quot;list&quot;) List&lt;String&gt; list)&#123; return &quot;&quot;;&#125; 1.2.PathVariable1234@RequestMapping(&quot;/get2/detail/&#123;userId&#125;&quot;)public String get2(@PathVariable(value=&quot;userId&quot;) String userId)&#123; return &quot;&quot;;&#125; 1.3.ModelAttribute1234@RequestMapping(&quot;/get3&quot;)public String get3(@ModelAttribute(&quot;user&quot;) UserVO user)&#123; return &quot;&quot;;&#125; 只是此处多了一个注解@ModelAttribute(&quot;user&quot;)，它的作用是将该绑定的命令对象以“user”为名称添加到模型对象中供视图页面展示使用。我们此时可以在视图页面使用$&#123;user.username&#125;来获取绑定的命令对象的属性 1.4.CookieValue1234@RequestMapping(&quot;/get4&quot;)public String get4(@CookieValue(value=&quot;JSESSIONID&quot;, defaultValue=&quot;&quot;) String sessionId)&#123; return &quot;&quot;;&#125; 1.5.RequestHeader1234@RequestMapping(&quot;/get5&quot;)public String get5(@RequestHeader(&quot;User-Agent&quot;) String userAgent)&#123; return &quot;&quot;;&#125; 2.数据校验2.1.validator接口验证 VO对象 123456789101112131415161718public class UserVO2 &#123; private String name; private String password; private String email; private String phone; private Integer age; private String desc; //getter and setter.... &#125; 实现Spring的validator接口 1234567891011121314public class UserValidator implements Validator &#123; @Override public boolean supports(Class&lt;?&gt; clazz) &#123; return clazz.equals(UserVO2.class); &#125; @Override public void validate(Object target, Errors errors) &#123; ValidationUtils.rejectIfEmpty(errors, &quot;name&quot;, &quot;name.null&quot;,&quot;用户名不能为空&quot;); ValidationUtils.rejectIfEmpty(errors, &quot;password&quot;, &quot;password.null&quot;, &quot;密码不能为空&quot;); &#125;&#125; 在controller中设置validator验证器，并进行业务校验 12345678910111213141516@InitBinder protected void initBinder(WebDataBinder binder)&#123; binder.setValidator(new UserValidator()); &#125; @ResponseBody@RequestMapping (value = &quot;/reg2&quot;, produces = &quot;text/html;charset=UTF-8&quot;) public String doReg2(@Validated UserVO2 user, BindingResult result)&#123; if(result.hasErrors())&#123; String msg = result.getFieldErrors().get(0).getDefaultMessage(); return msg; &#125; return &quot;success&quot;;&#125; 2.2.JSR-303 validation验证在Spring3.1中增加的了对JSR303 Bean Validation规范的支持，不仅可以对Spring的 MVC进行校验，而且也可以对Hibernate的存储对象进行校验。是一个通用的校验框架。 VO对象 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879public class UserVO &#123; @NotBlank(message=&quot;用户姓名不能为空&quot;) @Size (min=3, max=20, message=&quot;用户名长度只能在3-20之间&quot;) private String name; @NotBlank(message =&quot;用户密码不能为空&quot;) @Size (min=6, max=20, message=&quot;密码长度只能在6-20之间&quot;) private String password; @Email(message=&quot;邮箱格式不正确&quot;) private String email; @Pattern (regexp=&quot;^[1][3,4,5,7,8][0-9]&#123;9&#125;$&quot;, message=&quot;手机格式错误&quot;) private String phone; private Double salary; private Integer age; private String desc; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125; public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone; &#125; public Integer getAge() &#123; return age; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; public String getDesc() &#123; return desc; &#125; public void setDesc(String desc) &#123; this.desc = desc; &#125; @Money(message=&quot;标准的金额形式为xxx.xx&quot;) public Double getSalary() &#123; return salary; &#125; public void setSalary(Double salary) &#123; this.salary = salary; &#125;&#125; 自定义注解 123456789101112@Target(&#123;ElementType.FIELD,ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)@Constraint(validatedBy=MoneyValidator.class)public @interface Money &#123; String message() default &quot;不是金额形式&quot;; Class&lt;?&gt;[] groups() default &#123;&#125;; Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;; &#125; validator实现 12345678910111213141516171819public class MoneyValidator implements ConstraintValidator&lt;Money, Double&gt; &#123; private String moneyReg = &quot;^\\\\d+(\\\\.\\\\d&#123;1,2&#125;)?$&quot;;//表示金额的正则表达式 private Pattern moneyPattern = Pattern.compile(moneyReg); @Override public void initialize(Money money) &#123; &#125; @Override public boolean isValid(Double value, ConstraintValidatorContext context) &#123; if (value == null)&#123; return true; &#125; return moneyPattern.matcher(value.toString()).matches(); &#125;&#125; 在controller中进行业务校验 123456789@ResponseBody@RequestMapping (value = &quot;/reg&quot;, produces = &quot;text/html;charset=UTF-8&quot;) public String doReg(@Valid UserVO user, BindingResult result)&#123; if(result.hasErrors())&#123; String msg = result.getFieldErrors().get(0).getDefaultMessage(); return msg; &#125; return &quot;success&quot;;&#125; 参考 http://haohaoxuexi.iteye.com/blog/1812584 http://blog.csdn.net/walkerjong/article/details/7210727 http://jinnianshilongnian.iteye.com/blog/1705701","categories":[],"tags":[{"name":"springMVC","slug":"springMVC","permalink":"https://blog.zhanggz.com/tags/springMVC/"},{"name":"数据绑定","slug":"数据绑定","permalink":"https://blog.zhanggz.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"},{"name":"参数校验","slug":"参数校验","permalink":"https://blog.zhanggz.com/tags/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"}]},{"title":"Linux初始化工作","slug":"Linux初始化工作","date":"2015-05-24T05:32:59.000Z","updated":"2023-07-25T09:32:40.093Z","comments":true,"path":"2015/05/24/Linux初始化工作/","link":"","permalink":"https://blog.zhanggz.com/2015/05/24/Linux%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E4%BD%9C/","excerpt":"用户管理建用户12adduser usernamepasswd username 将新建用户添加至wheel组 root登录，修改 /etc/pam.d/su 文件，找到#auth required pam_wheel.so use_uid这一行，将行首的#去掉。 执行usermod -G wheel username 配置新建用户可使用sudo命令 执行#vim /etc/sudoers 找到root ALL=(ALL) ALL，复制一行，将root修改为username","text":"用户管理建用户12adduser usernamepasswd username 将新建用户添加至wheel组 root登录，修改 /etc/pam.d/su 文件，找到#auth required pam_wheel.so use_uid这一行，将行首的#去掉。 执行usermod -G wheel username 配置新建用户可使用sudo命令 执行#vim /etc/sudoers 找到root ALL=(ALL) ALL，复制一行，将root修改为username 删除不需要的用户，不需要的组 注意：不建议直接删除，当你需要某个用户时，自己重新添加会很麻烦。 cp /etc/passwd /etc/passwdbak #修改之前先备份 vi /etc/passwd #编辑用户，在前面加上#注释掉此行 12345678910#adm:x:3:4:adm:/var/adm:/sbin/nologin#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin#sync:x:5:0:sync:/sbin:/bin/sync#shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown#halt:x:7:0:halt:/sbin:/sbin/halt#uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin#operator:x:11:0:operator:/root:/sbin/nologin#games:x:12:100:games:/usr/games:/sbin/nologin#gopher:x:13:30:gopher:/var/gopher:/sbin/nologin#ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin #注释掉ftp匿名账号 cp /etc/group /etc/groupbak #修改之前先备份 vi /etc/group #编辑用户组，在前面加上#注释掉此行 123456#adm:x:4:root,adm,daemon#lp:x:7:daemon,lp#uucp:x:14:uucp#games:x:20:#dip:x:40:#news:x:9:13:news:/etc/news: 修改SSH连接 出于安全考虑，SSH服务配置做以下方面修改 修改端口 禁止root用户登陆 支持密钥登陆 禁用密码登陆 编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config文件 12345678Port 22 #自己定义一个端口HostKey /etc/ssh/ssh_host_dsa_key #支持密钥登陆PermitRootLogin no # 禁用root登陆StrictModes yes # 采用putty等客户端登陆需要改成noRSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keysPasswordAuthentication no # 禁用密码登陆 调用ssh-keygen -t rsa生成密钥对，将公钥上id_rsa.pub上传至服务器~/.ssh目录，然后执行cat id_rsa.pub &gt;&gt; authorized_keys 注意，操作完成后，新开一个连接检测是否配置正常，不要关闭当前连接，否则你可能永远都连不上你的服务器了。。。。 防火墙设置禁止ping 如果没有iptables禁止ping 12echo 1 &amp;gt; /proc/sys/net/ipv4/icmp_echo_igore_all #开启echo 0 &amp;gt; /proc/sys/net/ipv4/icmp_echo_igore_all #关闭 利用iptables规则禁ping 1iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP 注意保存service iptables save和重启服务service iptables reload 关闭selinux12/usr/sbin/setenforce 0 # 0立刻关闭 1立刻启用echo &quot;/usr/sbin/setenforce 0&quot; &gt;&gt; /etc/rc.local # 加到系统默认启动里面 关掉不必要的服务123chkconfig --list # 查看系统所有的服务是打开还是关闭chkconfig 服务名 on # 设置随机启动chkconfig 服务名 off # 设置不随机启动 修改系统参数12345678910111213141516cat&gt;&gt;/etc/sysctl.conf&lt;&lt;eof net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_tw_recycle = 1 net.ipv4.tcp_fin_timeout = 30 net.ipv4.tcp_keepalive_time = 120 net.ipv4.ip_local_port_range = 10000 65000 net.ipv4.tcp_max_tw_buckets = 8000 eof sysctl -p ulimit -HSn 65535 echo -ne &quot; * soft nofile 65535 * hard nofile 65535 &quot; &gt;&gt;/etc/security/limits.conf","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.zhanggz.com/tags/Linux/"},{"name":"ssh","slug":"ssh","permalink":"https://blog.zhanggz.com/tags/ssh/"},{"name":"iptables","slug":"iptables","permalink":"https://blog.zhanggz.com/tags/iptables/"}]}],"categories":[],"tags":[{"name":"springMVC","slug":"springMVC","permalink":"https://blog.zhanggz.com/tags/springMVC/"},{"name":"数据绑定","slug":"数据绑定","permalink":"https://blog.zhanggz.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"},{"name":"参数校验","slug":"参数校验","permalink":"https://blog.zhanggz.com/tags/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.zhanggz.com/tags/Linux/"},{"name":"ssh","slug":"ssh","permalink":"https://blog.zhanggz.com/tags/ssh/"},{"name":"iptables","slug":"iptables","permalink":"https://blog.zhanggz.com/tags/iptables/"}]}